
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000001de  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001d3  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000157  00000000  00000000  00000b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000162  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000011d  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000068 <digits>:
  68:	7b 41 f8 e9 c3 ab bb 49 fb eb db b3 3a f1 ba 9a     {A.....I....:...
  78:	3b d3                                               ;.

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_clear_bss>:
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a5 30       	cpi	r26, 0x05	; 5
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9a:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Initialize_Hardware>:


////////////////////////////////////////////////////////////////////////////////
// Functions
void Initialize_Hardware (void) {
	DDRB=0x0f;  // bits 4..0 as outputs
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	84 b9       	out	0x04, r24	; 4
	PORTB=0x0f; // All segments off
  a6:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0xc0; // bits 7..6 as outuputs
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xC0; // All segments off
  ac:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = 0x3f; // bits 5..0 as outputs
  ae:	8f e3       	ldi	r24, 0x3F	; 63
  b0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x3f; // All segments off
  b2:	88 b9       	out	0x08, r24	; 8
	
	// Configure timer 	
	TCCR1B = _BV(CS12) | _BV(CS11);  
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 81 00 	sts	0x0081, r24
  ba:	08 95       	ret

000000bc <Refresh_display>:

void Refresh_display (void) {
   static uint8_t a=0;
   //uint8_t b=0;
   
   a=(a+1) & 0x03;
  bc:	80 91 00 01 	lds	r24, 0x0100
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	83 70       	andi	r24, 0x03	; 3
  c4:	80 93 00 01 	sts	0x0100, r24
   
   
   PORTC = Display[a] & 0x3f;
  c8:	e8 2f       	mov	r30, r24
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ef 5f       	subi	r30, 0xFF	; 255
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	90 81       	ld	r25, Z
  d2:	9f 73       	andi	r25, 0x3F	; 63
  d4:	98 b9       	out	0x08, r25	; 8
   PORTD |= 0xc0;
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 6c       	ori	r25, 0xC0	; 192
  da:	9b b9       	out	0x0b, r25	; 11
   PORTD &= (Display[a] | 0x3f );
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	90 81       	ld	r25, Z
  e0:	9f 63       	ori	r25, 0x3F	; 63
  e2:	92 23       	and	r25, r18
  e4:	9b b9       	out	0x0b, r25	; 11
   
   
   
   switch (a) {
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	41 f0       	breq	.+16     	; 0xfa <Refresh_display+0x3e>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <Refresh_display+0x3a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	39 f0       	breq	.+14     	; 0xfe <Refresh_display+0x42>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	49 f4       	brne	.+18     	; 0x106 <Refresh_display+0x4a>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <Refresh_display+0x46>
	case 0:  PORTB=0xfe; break;
  f6:	8e ef       	ldi	r24, 0xFE	; 254
  f8:	05 c0       	rjmp	.+10     	; 0x104 <Refresh_display+0x48>
	case 1:  PORTB=0xfd; break;
  fa:	8d ef       	ldi	r24, 0xFD	; 253
  fc:	03 c0       	rjmp	.+6      	; 0x104 <Refresh_display+0x48>
	case 2:  PORTB=0xfb; break;
  fe:	8b ef       	ldi	r24, 0xFB	; 251
 100:	01 c0       	rjmp	.+2      	; 0x104 <Refresh_display+0x48>
	case 3:  PORTB=0xf7; break;
 102:	87 ef       	ldi	r24, 0xF7	; 247
 104:	85 b9       	out	0x05, r24	; 5
 106:	08 95       	ret

00000108 <main>:
//                                                      


int main()
{
	wdt_disable(); // no watchdog 
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	80 93 60 00 	sts	0x0060, r24
 112:	10 92 60 00 	sts	0x0060, r1
 116:	0f be       	out	0x3f, r0	; 63
    
	Initialize_Hardware ();
 118:	0e 94 51 00 	call	0xa2	; 0xa2 <Initialize_Hardware>
	 
	Display[0] = ~_P;
 11c:	85 e2       	ldi	r24, 0x25	; 37
 11e:	80 93 01 01 	sts	0x0101, r24
	Display[1] = ~_L;
 122:	8d ec       	ldi	r24, 0xCD	; 205
 124:	80 93 02 01 	sts	0x0102, r24
	Display[2] = ~_A;
 128:	84 e2       	ldi	r24, 0x24	; 36
 12a:	80 93 03 01 	sts	0x0103, r24
	Display[3] = ~_Y;	
 12e:	8c e1       	ldi	r24, 0x1C	; 28
 130:	80 93 04 01 	sts	0x0104, r24
	
	// Start the show!
	for (;;) {
	   Refresh_display();
 134:	0e 94 5e 00 	call	0xbc	; 0xbc <Refresh_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	81 e1       	ldi	r24, 0x11	; 17
 13a:	9a e7       	ldi	r25, 0x7A	; 122
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x34>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x3a>
 142:	00 00       	nop
 144:	f7 cf       	rjmp	.-18     	; 0x134 <main+0x2c>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
