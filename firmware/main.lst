   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	Initialize_Hardware
  12               	Initialize_Hardware:
  13               	.LFB7:
  14               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  *   ___ _              __  __      _       
   3:main.c        ****  *  / __| |_  ___ _____|  \/  |__ _| |_ ___ 
   4:main.c        ****  * | (__| ' \/ -_|_-<_-< |\/| / _` |  _/ -_)
   5:main.c        ****  *  \___|_||_\___/__/__/_|  |_\__,_|\__\___|
   6:main.c        ****  *                                         
   7:main.c        ****  *   
   8:main.c        ****  *  Microcontroller based Chess Computer
   9:main.c        ****  *  
  10:main.c        ****  *
  11:main.c        ****  *  Authors: Daniel Jose Viana - danjovic@hotmail.com
  12:main.c        ****  *           Reinaldo Flamino 
  13:main.c        ****  *  
  14:main.c        ****  *  Version 0.1 - 05 December 2015
  15:main.c        ****  */ 
  16:main.c        **** 
  17:main.c        **** ////////////////////////////////////////////////////////////////////////////////
  18:main.c        **** // required headers
  19:main.c        **** #include <avr/io.h>
  20:main.c        **** #include <avr/wdt.h>
  21:main.c        **** #include <avr/interrupt.h>
  22:main.c        **** #include <util/delay.h>
  23:main.c        **** #include <avr/pgmspace.h>
  24:main.c        **** #include <string.h>
  25:main.c        **** 
  26:main.c        **** ////////////////////////////////////////////////////////////////////////////////
  27:main.c        **** // Definitions
  28:main.c        **** #include "board_definitions.h"
  29:main.c        **** #include "IO_functions.h"
  30:main.c        **** 
  31:main.c        **** ////////////////////////////////////////////////////////////////////////////////
  32:main.c        **** // Variables
  33:main.c        **** 
  34:main.c        **** static uint8_t Display[4] = { 0x00, 0x00, 0x00, 0x00 };   // blank display
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** ////////////////////////////////////////////////////////////////////////////////
  38:main.c        **** // Functions
  39:main.c        **** void Initialize_Hardware (void) {
  15               		.loc 1 39 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  40:main.c        **** 	DDRB=0x0f;  // bits 4..0 as outputs
  21               		.loc 1 40 0
  22 0000 8FE0      		ldi r24,lo8(15)
  23 0002 84B9      		out 0x4,r24
  41:main.c        **** 	PORTB=0x0f; // All segments off
  24               		.loc 1 41 0
  25 0004 85B9      		out 0x5,r24
  42:main.c        **** 	
  43:main.c        **** 	DDRD = 0xc0; // bits 7..6 as outuputs
  26               		.loc 1 43 0
  27 0006 80EC      		ldi r24,lo8(-64)
  28 0008 8AB9      		out 0xa,r24
  44:main.c        **** 	PORTD = 0xC0; // All segments off
  29               		.loc 1 44 0
  30 000a 8BB9      		out 0xb,r24
  45:main.c        **** 	
  46:main.c        **** 	DDRC = 0x3f; // bits 5..0 as outputs
  31               		.loc 1 46 0
  32 000c 8FE3      		ldi r24,lo8(63)
  33 000e 87B9      		out 0x7,r24
  47:main.c        **** 	PORTC = 0x3f; // All segments off
  34               		.loc 1 47 0
  35 0010 88B9      		out 0x8,r24
  48:main.c        **** 	
  49:main.c        **** 	// Configure timer 	
  50:main.c        **** 	TCCR1B = _BV(CS12) | _BV(CS11);  
  36               		.loc 1 50 0
  37 0012 86E0      		ldi r24,lo8(6)
  38 0014 8093 8100 		sts 129,r24
  39 0018 0895      		ret
  40               		.cfi_endproc
  41               	.LFE7:
  43               	.global	Refresh_display
  45               	Refresh_display:
  46               	.LFB8:
  51:main.c        **** 
  52:main.c        **** }
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        **** 
  57:main.c        **** void Refresh_display (void) {
  47               		.loc 1 57 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  58:main.c        ****    static uint8_t a=0;
  59:main.c        ****    //uint8_t b=0;
  60:main.c        ****    
  61:main.c        ****    a=(a+1) & 0x03;
  53               		.loc 1 61 0
  54 001a 8091 0000 		lds r24,a.1770
  55 001e 8F5F      		subi r24,lo8(-(1))
  56 0020 8370      		andi r24,lo8(3)
  57 0022 8093 0000 		sts a.1770,r24
  62:main.c        ****    
  63:main.c        ****    
  64:main.c        ****    PORTC = Display[a] & 0x3f;
  58               		.loc 1 64 0
  59 0026 E82F      		mov r30,r24
  60 0028 F0E0      		ldi r31,0
  61 002a E050      		subi r30,lo8(-(Display))
  62 002c F040      		sbci r31,hi8(-(Display))
  63 002e 9081      		ld r25,Z
  64 0030 9F73      		andi r25,lo8(63)
  65 0032 98B9      		out 0x8,r25
  65:main.c        ****    PORTD |= 0xc0;
  66               		.loc 1 65 0
  67 0034 9BB1      		in r25,0xb
  68 0036 906C      		ori r25,lo8(-64)
  69 0038 9BB9      		out 0xb,r25
  66:main.c        ****    PORTD &= (Display[a] | 0x3f );
  70               		.loc 1 66 0
  71 003a 2BB1      		in r18,0xb
  72 003c 9081      		ld r25,Z
  73 003e 9F63      		ori r25,lo8(63)
  74 0040 9223      		and r25,r18
  75 0042 9BB9      		out 0xb,r25
  67:main.c        ****    
  68:main.c        ****    
  69:main.c        ****    
  70:main.c        ****    switch (a) {
  76               		.loc 1 70 0
  77 0044 8130      		cpi r24,lo8(1)
  78 0046 01F0      		breq .L5
  79 0048 00F0      		brlo .L4
  80 004a 8230      		cpi r24,lo8(2)
  81 004c 01F0      		breq .L6
  82 004e 8330      		cpi r24,lo8(3)
  83 0050 01F4      		brne .L2
  84 0052 00C0      		rjmp .L7
  85               	.L4:
  71:main.c        **** 	case 0:  PORTB=0xfe; break;
  86               		.loc 1 71 0
  87 0054 8EEF      		ldi r24,lo8(-2)
  88 0056 00C0      		rjmp .L8
  89               	.L5:
  72:main.c        **** 	case 1:  PORTB=0xfd; break;
  90               		.loc 1 72 0
  91 0058 8DEF      		ldi r24,lo8(-3)
  92 005a 00C0      		rjmp .L8
  93               	.L6:
  73:main.c        **** 	case 2:  PORTB=0xfb; break;
  94               		.loc 1 73 0
  95 005c 8BEF      		ldi r24,lo8(-5)
  96 005e 00C0      		rjmp .L8
  97               	.L7:
  74:main.c        **** 	case 3:  PORTB=0xf7; break;
  98               		.loc 1 74 0
  99 0060 87EF      		ldi r24,lo8(-9)
 100               	.L8:
 101 0062 85B9      		out 0x5,r24
 102               	.L2:
 103 0064 0895      		ret
 104               		.cfi_endproc
 105               	.LFE8:
 107               		.section	.text.startup,"ax",@progbits
 108               	.global	main
 110               	main:
 111               	.LFB9:
  75:main.c        ****    
  76:main.c        ****    
  77:main.c        ****    }
  78:main.c        ****    
  79:main.c        **** 
  80:main.c        **** }
  81:main.c        **** 
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        **** 
  85:main.c        **** ////////////////////////////////////////////////////////////////////////////////
  86:main.c        **** //  __  __      _        ___             _   _          
  87:main.c        **** // |  \/  |__ _(_)_ _   | __|  _ _ _  __| |_(_)___ _ _  
  88:main.c        **** // | |\/| / _` | | ' \  | _| || | ' \/ _|  _| / _ \ ' \ 
  89:main.c        **** // |_|  |_\__,_|_|_||_| |_| \_,_|_||_\__|\__|_\___/_||_|
  90:main.c        **** //                                                      
  91:main.c        **** 
  92:main.c        **** 
  93:main.c        **** int main()
  94:main.c        **** {
 112               		.loc 1 94 0
 113               		.cfi_startproc
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  95:main.c        **** 	wdt_disable(); // no watchdog 
 118               		.loc 1 95 0
 119 0000 88E1      		ldi r24,lo8(24)
 120               	/* #APP */
 121               	 ;  95 "main.c" 1
 122 0002 0FB6      		in __tmp_reg__, __SREG__
 123 0004 F894      		cli
 124 0006 8093 6000 		sts 96, r24
 125 000a 1092 6000 		sts 96, __zero_reg__
 126 000e 0FBE      		out __SREG__,__tmp_reg__
 127               		
 128               	 ;  0 "" 2
  96:main.c        ****     
  97:main.c        **** 	Initialize_Hardware ();
 129               		.loc 1 97 0
 130               	/* #NOAPP */
 131 0010 0E94 0000 		call Initialize_Hardware
 132               	.LVL0:
  98:main.c        **** 	 
  99:main.c        **** 	Display[0] = ~_P;
 133               		.loc 1 99 0
 134 0014 85E2      		ldi r24,lo8(37)
 135 0016 8093 0000 		sts Display,r24
 100:main.c        **** 	Display[1] = ~_L;
 136               		.loc 1 100 0
 137 001a 8DEC      		ldi r24,lo8(-51)
 138 001c 8093 0000 		sts Display+1,r24
 101:main.c        **** 	Display[2] = ~_A;
 139               		.loc 1 101 0
 140 0020 84E2      		ldi r24,lo8(36)
 141 0022 8093 0000 		sts Display+2,r24
 102:main.c        **** 	Display[3] = ~_Y;	
 142               		.loc 1 102 0
 143 0026 8CE1      		ldi r24,lo8(28)
 144 0028 8093 0000 		sts Display+3,r24
 145               	.L10:
 103:main.c        **** 	
 104:main.c        **** 	// Start the show!
 105:main.c        **** 	for (;;) {
 106:main.c        **** 	   Refresh_display();
 146               		.loc 1 106 0 discriminator 1
 147 002c 0E94 0000 		call Refresh_display
 148               	.LVL1:
 149               	.LBB4:
 150               	.LBB5:
 151               		.file 2 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.7.2/../..
   1:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   6:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   9:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  12:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  17:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  21:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  33:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  35:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  38:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  41:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  42:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <inttypes.h>
  43:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <util/delay_basic.h>
  44:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <math.h>
  45:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  46:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \file */
  47:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \code
  49:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     //#define F_CPU 14.7456E6
  51:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #include <util/delay.h>
  52:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \endcode
  53:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  54:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     used.
  58:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  59:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions in this header file are wrappers around the basic
  60:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     convenience functions where actual time values can be specified
  62:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     frequency passed by the macro F_CPU.
  67:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  68:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     will experience severe code bloat by the floating-point library
  75:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     routines linked into the application.
  76:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  77:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions available allow the specification of microsecond, and
  78:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  81:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** */
  82:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  83:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if !defined(__DOXYGEN__)
  84:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  87:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  88:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef F_CPU
  89:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* prevent compiler error by supplying a default */
  90:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # define F_CPU 1000000UL
  92:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  93:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  94:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __OPTIMIZE__
  95:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  97:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  98:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 101:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #  include <math.h>
 102:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
 103:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 104:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /**
 105:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    \ingroup util_delay
 106:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 107:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 109:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 112:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 114:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    user will not be informed about decreased resolution.
 119:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 120:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    no delay i.e., 0ms.
 124:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 125:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 129:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    to round down and round to closest integer.
 131:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 132:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Also, the backward compatible
 136:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    required for rounding are not available to the compiler then.
 139:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 140:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****  */
 141:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** void
 142:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** _delay_ms(double __ms)
 143:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** {
 144:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint16_t __ticks;
 145:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	double __tmp ; 
 146:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 149:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint32_t __ticks_dc;
 150:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 153:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 156:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 159:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#else
 160:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		//round up by default
 161:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#endif
 163:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 164:c:\program files (x86)\atmel\avr tools\avr toolchain\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 152               		.loc 2 164 0 discriminator 1
 153 0030 81E1      		ldi r24,lo8(31249)
 154 0032 9AE7      		ldi r25,hi8(31249)
 155 0034 0197      		1: sbiw r24,1
 156 0036 01F4      		brne 1b
 157 0038 00C0      		rjmp .
 158 003a 0000      		nop
 159 003c 00C0      		rjmp .L10
 160               	.LBE5:
 161               	.LBE4:
 162               		.cfi_endproc
 163               	.LFE9:
 165               	.global	digits
 166               		.section	.progmem.data,"a",@progbits
 169               	digits:
 170 0000 7B        		.byte	123
 171 0001 41        		.byte	65
 172 0002 F8        		.byte	-8
 173 0003 E9        		.byte	-23
 174 0004 C3        		.byte	-61
 175 0005 AB        		.byte	-85
 176 0006 BB        		.byte	-69
 177 0007 49        		.byte	73
 178 0008 FB        		.byte	-5
 179 0009 EB        		.byte	-21
 180 000a DB        		.byte	-37
 181 000b B3        		.byte	-77
 182 000c 3A        		.byte	58
 183 000d F1        		.byte	-15
 184 000e BA        		.byte	-70
 185 000f 9A        		.byte	-102
 186 0010 3B        		.byte	59
 187 0011 D3        		.byte	-45
 188               		.local	a.1770
 189               		.comm	a.1770,1,1
 190               		.local	Display
 191               		.comm	Display,4,1
 192               		.text
 193               	.Letext0:
 194               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.7.2/../..
 195               		.file 4 "IO_functions.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:2      *ABS*:0000003e __SP_H__
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:3      *ABS*:0000003d __SP_L__
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:4      *ABS*:0000003f __SREG__
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:6      *ABS*:00000001 __zero_reg__
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:12     .text:00000000 Initialize_Hardware
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:45     .text:0000001a Refresh_display
                             .bss:00000000 a.1770
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:189    .bss:00000001 Display
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:110    .text.startup:00000000 main
C:\Users\user\AppData\Local\Temp\ccewFYqb.s:169    .progmem.data:00000000 digits

UNDEFINED SYMBOLS
__do_clear_bss
